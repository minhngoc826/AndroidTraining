// Home
Name							IP						Web/Port/Type
lab-server						192.168.1.10			todolist:8080/Vuejs:nginx		shoeshop
git-db-registry-server			192.168.1.20			gitlab:80						database:3306				registry:5000
jenkins-server					192.168.1.30			jenkins:8080
///////////////////Samsung//////////////////////////////////////////////////////////////////
Name					IP						Web/Port/Type
dev-server				192.168.56.10			todolist:2001/Vuejs:nginx			vision:3000/React:service			shoeshop:8090/Spring:
												todolist:5555/Vuejs:docker			vision:4444/React:docker			shoeshop:7777-6666/Spring:docker
database-server			192.168.56.20
gitlab-server			192.168.56.30																					shoeshop:8066/Spring
desktop					192.168.56.40
/////////////////////////////////////////////////////////////////////////////////////
1. Project: Envinroment: deployment - staging - prodction
2. Devops:
	- Setup Envinroment: 
		+ Servers: 					Linux, nginx, connection between servers [dev-server, gitlab-server, database-server], phân quyền user / security
		+ Setup Manage project: 	Gitlab, Jenkins, Travis, Circle
		+ CI/CD:					build -> test: 	pef, security, clean code, ...
									run: 			deploy
// Company
1. Gitlab-server: 		container project code -> CI/CD 
						-> build -> run: make docker image
						
2. Database-server:		contains database
						-> docker: contains docker image --> push image to registry
						
3. Server (dev-server):	deploy web, app
						-> docker: registry-server
						
/////////////////////////////////////////////////////////////////////////////////////
1. Project
	- install dependencies / tools for project (run & deploy)
	- set chmod, chowner for user & project
	- frontend:	Vue/React:	
		+ install packages: 		sudo apt install nodejs nginx npm -y
		+ install dependencies:		npm install
		+ deploy:												
			- build:				npm run build	 (folder: dist / build)						npm run start/server	
			- run:					
				+ webserver:		nginx		-> config: /etc/nginx/conf.d/xxx.conf			working: /usr/share/nginx/html/		-> apply: systemctl restart nginx / nginx -s reload
														server {
															listen 		8081; // port
															root 		/projects/todolist/dist/; // build folder
															index 		index.html;
															try_files	$uri $uri/ /index.html;
														}
				+ service:			systemctl	-> config: /lib/systemd/system/xxx.service		-> apply: systemctl daemon-reload /	systemctl restart vision (.service)	
														[Service]
														Type=simple
														User=vision
														Restart=on-failure
														WorkingDirectory=/projects/vision/
														ExecStart=npm run start -- --port=3000
	- backend:
		+ Java Spring:	
			- install java, maven, database:	apt install openjdk-17-jdk openjdk-17-jre maven mariadb-server -y
			- deploy:			build:	mvn install -DskipTest=true		/		run:	nohup java -jar target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar 2>&1 &
/////////////////////////////////////////////////////////////////////////////////////
2. Database:	database-server
	- install: 		apt install mariadb-server -y
	- config:		/etc/mysql/mariadb.conf.d/xx_server.cnf		-> 		bind-address = 0.0.0.0		-> systemctl stop/restart mariadb
	- create db:	mysql -u root	-->		create database dbName; create user 'uName'@'%' indentified by 'pass'; 
											grant all privileges on dbName.* to 'uName'@'%'; flush privileges; exit
	- connect db:	mysql -h IP	-P 3306 -u uName -p 	-> enper password		-> use dbName; source db-file-path; // import db
	- config db for project:		project/src/main/resource/application.properties
		- spring.datasource.url=jdbc:mysql://<address_server>:<port>/<database_name>//?useSSL=false
		- spring.datasource.username=<username>
		- spring.datasource.password=<password>
		- server.port=8090
/////////////////////////////////////////////////////////////////////////////////////
3. Gitlab: gitlab-server
	- gitlab-ee:
		+ install: 		google
			- config: 		/etc/gitlab/gitlab.rb		-> external_url: gitlab domain	->		gitlab-ctl reconfigure
			- add hosts:	/etc/hosts					/windows hosts					-> 		add for gitlab-server & other server
		+ admin:		manage group/user/project
		+ project:	
			- config:	protected branch, runner, add variables, tags, pipeline, graph ...
			- create: 	branch/commit/merge request/
		
		+ gitlab secret: ...
/////////////////////////////////////////////////////////////////////////////////////
4. Registry server: docker registry-server
	+ public: 			dockerhub
	+ harbor registry: 	
	+ private registry: self authentication by openssl
		- install openssl:				apt install openssl -y			mkdir -p /tools/docker/registry/certs & data
		- gen key by openssl:			cd /tools/docker/registry/		openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -subj "/CN=192.168.1.10" -addext "subjectAltName=DNS:192.168.1.10,IP:192.168.1.10" -x509 -days 3650 -out certs/domain.crt
		- install docker-compose: 		apt install docker-compose
		- write docker-compose.yml:		cd /tools/docker/registry/		nano docker-compose.yml		--> run: docker-compose up -d
			version: '3'
			services:
				type-name:
					image: image:tag
					container_name: registry-server
					restart: 
					ports:
						- "5000":"5000"
					volumes:
						-
					envinroment:
						-
		- copy cert to self & any client:		mkdir -p /etc/docker/certs.d/192.168.56.10:5000			cp 	/tools/docker/registry/certs/domain.crt 	/etc/docker/certs.d/192.168.56.10:5000/ca.crt
		- check:
			+ docker-compose ps						// list docker-compose running
			+ 192.168.56.10:5000/v2/_catalog:		// list images on registry			// registry-domain/v2/_catalog ~ registry.devops.com/v2/_catalog
			+ 192.168.56.10:5000/v2/image/tag/list:	// list tags of image on registry
/////////////////////////////////////////////////////////////////////////////////////
5. Jenkins server:
	+ install:
	+ connect jenkins vs lab-server
	+ connect jenkins vs gitlab-server
	+ CI/CD with jenkins:
/////////////////////////////////////////////////////////////////////////////////////
6. Deploy servers: lab-server, sub-server, ...
	+ Gitlab CI/CD:
		// lab-server
		- gitlab-runner:	install on lab-server (not gitlab-server)
			+ install:		curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash	/	apt install gitlab-runner
				- config:	/etc/gitlab-runner/config.toml		-> 		edit concurrent
							visudo								->		gitlab-runner ALL=(ALL:ALL) NOPASSWD: /bin/cp*			// for using other user to run CI/CD
			+ gitlab-runner register -> gitlab domain, token (on gitlab-server), runner name, executor=shell/docker/...
			+ gitlab-runner run --wd /home/gitlab-runner --config ../config.toml --service gitlab-runner --user gitlab-runner
			+ gitlab-runner list
		// gitlab-server
		- gitlab:	
			+ .gitlab-ci.yml	-> stages / variables / stage: job / when: manual / script / tag: runner-name / only: tags
			+ CI with docker:
				- build:	
					+ before_script:	docker login registry-server -u user -p password
					+ script:		 	docker build -t image . 	/		docker push image registry-server
				- run:
					+ before_script:	docker login registry-server -u user -p password
					+ script:		 	docker pull image	 	/		docker run --name containerName -dp serverPort:containerPort image		/	add user & roles
					
	+ Jenkins CI/CD:
		- 
		-
/////////////////////////////////////////////////////////////////////////////////////
4. Docker: on lab-server
	- install: apt install docker.io
	- docker  login url / pull domain/project/image:tag / 				start container / stop / rm / rmi / logs / ps / push domani/project/image:tag
	- docker build -t domani/project/image:tag					-> build image
	- docker run --name name -dp 8080:80 -it image:tag
	
	- Dockerfile:	create new Dockerfile in ../project/
		+ Build:	FROM build-alpine:ver as build			WORKDIR /app							COPY . .							RUN cmd_build
		+ Run:		FROM run-alpine:ver						WORKDIR /run		RUN cmd_user		COPY --from=build /src /target		Run	cmd_run				ENTRYPOINT cmd_run
		+ EVN, EXPOSE, USER
	
	- docker-compose:
		
		+ docker-compose.yml
			
		+ docker-compose up -d
		
	- Docker registry:
					
/////////////////////////////////////////////////////////////////////////////////////
5. Jenkins
/////////////////////////////////////////////////////////////////////////////////////
6. Monitoring
/////////////////////////////////////////////////////////////////////////////////////
- Mô hình CI/CD:
	- TCB:
		+ Team: 		Sec - Vault			Ops - System		 Dev - Code
		+ Tool CI/CD:	jenkins - ansible
		+ Repo:			gitlab
		+ 1 tài khoản đặc quyền với full quyền tác động lên server, tkdq nhập use/path lên vault path, pass chia 2 nửa, sec gõ 1 nửa, ops gõ 1 nửa, sau khi nhập xong thì sec/ops chỉ biết là có cái path đó, ko biết pass là j.
		+ Dev code & commit trên repo dev -> sau 30'-1h repo dev đc sync đến repo prod, ops cũng viết pipeline để cicd cho app và commit như vậy.
		+ trong pipeline, ops define url vault, path vault, trong jenkins ops define credential vault -> đến ngày golive thì chạy
		
		+ 

- gitops: sử dụng kết hợp với Vault, ko lưu secret trong git.
- kyverno: xử lý phân quyền
- Vault: quản lý secret tập trung, edit/update secret -> ko có quyền vào Vault thì ko xem đc
	+ ks8 load secret by Agent -> phân quyền xem secret
	+ gitlab: save path of secret on Vault, ko đc khai báo secret trực tiếp
	
	+ nếu k sử dụng Vault, khi agent inject secret vào pod thì secret sẽ là env var/file, bất cứ ai có quyền exec pod cũng xem đc secret (maintainer) -> dùng Vault
		- if not Vault: xxx
	+ Gitlab-CI:
		+ save value of Vault
		+ cần xác thực (user, pass) đến Vault rồi mới pull value về được.
		-> dùng gitlab-secret
	+ Jenkins: define secret trong credential
		
- Security:
	+ Quy trình use, save credential, phân quyền, quản lý ntn:
		- credential save on Vault, chia 2 nửa, ops 1 nửa, sec 1 nửa
		- khai báo secret vào helm/manifest, path là url trên vault, đã gồm 2 nửa trên kia
	+ QT1:
		- Cluster: 	dùng RBAC giới hạn quyền của user, cho phép user/group có quyền j với secret/pro/deployment
		- k8s:		cũng cần phân quyền pod, ..., ko phải ai cũng có thể xem secret hay exec pod đc
		
	
	+ Secrets Store CSI Driver: kết hợp vs Dev + RBAC để phân quyền cho api k8s
- Migrate DB:
	+ 
	+ 
/////////////////////////////////////////////////////////////////////////////////////
