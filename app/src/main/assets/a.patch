Subject: [PATCH] patch-06-02-25
---
Index: app/src/main/assets/DevopsDoc/0.DevOps.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/assets/DevopsDoc/0.DevOps.txt b/app/src/main/assets/DevopsDoc/0.DevOps.txt
--- a/app/src/main/assets/DevopsDoc/0.DevOps.txt	(revision 45e111c103a0fb3bd2123b5b8b022355c059df0a)
+++ b/app/src/main/assets/DevopsDoc/0.DevOps.txt	(date 1738860113745)
@@ -567,6 +567,7 @@
 		+ Install docker:						https://devopsedu.vn/courses/devops-for-freshers/lesson/bai-19-cach-su-dung-docker/
 			- mkdir tools/docker		-> 		touch tools/docker/install-docker.sh
 			- Run:	.install-docker.sh 			sh install-docker.sh 					bash install-docker.sh
+			- way2:	apt install docker-ce		https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04
 			
 		+ Pull & run docker image from docker hub:					https://hub.docker.com/
 			- docker pull ubuntu:2204								-> pull imageName:tag, nếu ko có tag = latest
@@ -632,16 +633,11 @@
 					-------------------------------------------------------------------------
 					# using existing alpine from docker hub
 					FROM amazoncorretto:8u402-alpine-jre
-					
-					# config user for run
-					RUN adduser -D shoeshop										# create user
 					-------------------------------------------------------------------------
 					
 					-------------------------------------------------------------------------
 					# tự build alpine
 					FROM alpine:3.19											# using original alpine
-					
-					RUN adduser shoeshop										# create user
 					RUN apk add openjdk8										# install java 8 for alpine
 					-------------------------------------------------------------------------
 					
@@ -649,6 +645,7 @@
 					COPY --from=build /app/target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar /run/shoeshop/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar
 					
 					# config user for run
+					RUN adduser -D shoeshop										# create user
 					RUN chown -R shoeshop:shoeshop /run/shoeshop
 					USER shoeshop
 					
@@ -758,8 +755,9 @@
 					- before_script: 	docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
 					- script:			docker buil -t ${DOCKER_IMAGE} .												docker push $DOCKER_IMAGE
 				+ run:
-					- before_script: 	docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}
-					- script:			docker run --name $DOCKET_CONTAINER -dp 8080:8080 $DOCKER_IMAGE					// note: port in Dockerfile must same containerPort in run command: -dp 8080:8080 and not use port which is running on server
+					- before_script: 	docker login ${REGISTRY_URL} -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD}		docker pull $DOCKER_IMAGE
+					- script:			docker rm -f $DOCKET_CONTAINER
+										docker run --name $DOCKET_CONTAINER -dp 8080:8080 $DOCKER_IMAGE					// note: port in Dockerfile must same containerPort in run command: -dp 8080:8080 and not use port which is running on server
 				+ showlog:
 					- script:			docker logs $DOCKER_CONTAINER
 			- note: 
@@ -805,7 +803,7 @@
 			+ Systemlog:	
 			+ Jenkins CLI: 		hoàn toàn tự động mọi thứ
 		
-		- Jenkins CI/CD:
+		- Jenkins CI/CDeployment:
 			// 1. kết nối jenkins-server đến lab-server: 		jenkins Agent
 			+ Jenkins Agent:				java version on client ~ java version on Jenkins server install (thay vì dùng ssh - kết nối ngang hàng, ko bảo mật, dễ gây lỗi)
 				- lab-server: 				
@@ -817,10 +815,12 @@
 					+ add Node:		
 						- number of executors: 	số pipeline đc chạy cùng lúc	-	Custom workdir path / Remote root directory: 1 folder on lab-server (/var/lib/jenkins)
 						- port/inbound:			create fixed port in Security (ko đc trùng port)	
-						- save:					click to node to show config to connect client -> run from agent command line, with the secret stored in a file
+						- save:					click to node to show config to connect client -> run from agent command line, with the secret stored in a file		-> node not running
 				- lab-server:			su jenkins	-	cd /var/lib/jenkins														// ko dùng user root
+										// save secret key and agent.jar file
 										echo 377af60a51c9471b486e10c4b928ca5fb66c430986e337b67162df2bdc101e1a > secret-file
 										curl -sO http://jenkins.devops.tech:8080/jnlpJars/agent.jar
+										// start runing node
 										java -jar agent.jar -url http://jenkins.devops.tech:8080/ -secret @secret-file -name "lab-server" -webSocket -workDir "/var/lib/jenkins" > nohup.out 2>&1 &
 			
 			// 2. kết nối jenkins-server đến gitlab-server: 	2.1. plugin-gitlab & BlueOcen		2.2. tạo pipeline CI/CD
@@ -857,33 +857,267 @@
 					+ Add Jenkinsfile for project: groovy syntax
 						pipeline {
 							agent {
-								label 'lab-server-label'
+								label 'lab-server-node-label'
 							}
 							environment {
 								appUser = "shoeshop"
-								appName =  "shoe-ShoppingCart"
+								appName = "shoe-ShoppingCart"
 								appVersion = "0.0.1-SNAPSHOT"
 								appType = "jar"
-								processName = "${appName}-${appVersion}.${appType}"
+								processName = "${appUser}-${appVersion}.${appType}"
 								folderDeploy = "/datas/${appUser}"
 								buildScript = "mvn clean install -DskipTests=true"
+								copyScript = "cp target/${processName} ${folderDeploy}"
+								permsScript = "chown -R ${appUser}. ${folderDeploy}"
+								killScript = "sudo kill -9 \$(pgrep -f ${processName})"
+								deployScript = "sudo su ${appUser}; cd ${folderDeploy}; pwd; ls -l; whoami; java -jar ${processName} > nohup.out 2>&1 &"
 							}
 							stages {
 								stage('build') {
 									steps {
-										sh(script: """ whoami;pwd;ls -la;${buildScript} """, label: "build-job with maven")
+										sh(script: """ whoami; pwd; ls -la; ${buildScript} """, label: "show info")
+									}
+								}
+								stage('deploy') {
+									steps {
+										sh(script: """ ${copyScript} """, label: "copy jar file")
+										sh(script: """ ${permsScript} """, label: "set permission")
+										sh(script: """ ${killScript} """, label: "kill old processName")
+										sh(script: """ ${deployScript} """, label: "deploy app")
+										/////////// Delivery //////////////////////////////////
+										script {
+											try {
+												timeout(time: 5, unit: 'MINUTES') {
+													evn.userChoice = input message: "Do you want to deploy this?", parameters: [choice(name: 'deploy', choices: 'no\nyes', description: 'Choose "yes" to deploy')]
+												}
+												echo "Check choice: $env.userChoice"
+												if (evn.userChoice == 'yes') {
+													sh(script: """ ${copyScript} """, label: "copy jar file")
+													sh(script: """ ${permsScript} """, label: "set permission")
+													sh(script: """ ${killScript} """, label: "kill old processName")
+													sh(script: """ ${deployScript} """, label: "deploy app")
+												} else {
+													echo "User do not confirm the deployment!"
+												}
+											} catch(Exception ex) {
+												echo "Deploy Exception: $ex"
+											}
+										}
 									}
 								}
 							}
 						}
 
-		
+		- Jenkins CI/CDelivery:
+			+ make service to start jenkins-agent: 		nano /lib/systemd/system/jenkins-agent.service
+					[Unit]
+					Description=Jenkins Agent Service
+					After=network.target								# run service sau khi network dc thiet lap xong
+					
+					[Service]
+					Type=simple
+					WorkingDirectory=/var/lib/jenkins
+					ExecStart=/bin/bash -c 'java -jar agent.jar -url http://jenkins.devops.com:8080/ -secret @secret-file -name "lab-server-node" -webSocket -workDir "/var/lib/jenkins/"'		# command to run jenkins-agent
+					User=jenkins
+					Restart=always										# auto restart if it is stopped
+					
+					[Install]
+					WantedBy=multi-user.target							# can run by multi-user
+			+ CDelivery:
+				- approved deploy:	
+						pipeline {
+							agent {
+								label 'lab-server-node-label'
+							}
+							environment {
+								..........
+							}
+							stages {
+								stage('build') {
+									...............
+								}
+								stage('deploy') {
+									steps {
+										script {
+											try {
+												timeout(time: 5, unit: 'MINUTES') {
+													evn.userChoice = input message: "Do you want to deploy this?", parameters: [choice(name: 'deploy', choices: 'no\nyes', description: 'Choose "yes" to deploy')]
+												}
+												echo "Check choice: $env.userChoice"
+												if (evn.userChoice == 'yes') {
+													sh(script: """ ${copyScript} """, label: "copy jar file")
+													sh(script: """ ${permsScript} """, label: "set permission")
+													sh(script: """ ${killScript} """, label: "kill old processName")
+													sh(script: """ ${deployScript} """, label: "deploy app")
+												} else {
+													echo "User do not confirm the deployment!"
+												}
+											} catch(Exception ex) {
+												echo "Deploy Exception: $ex"
+											}
+										}
+									}
+								}
+							}
+						}
+				- totaly manual deploy: for production environment
+					// make selection for build
+					+ create new folder - pipline for production: 	Action-in-prod	-> add pipeline shoeshop -> config as below: -> Save
+						- Max of build: 10
+						- Gitlab connection: using parameters [Choice params: Name=server, Choices=lab-server/server1/server2 (~ jenkin node)]=select Server		[Choice params: Name=Action, Choices=start/stop/restart/update]=select Action
+					//
+					+ install plugin:	Active Choice			// search: Active choice Jenkins			groovy script jenkins				node syntax jenkins
+					+ steps:
+						- script select server						// Active choice parameters
+						- script select action						// Active choice parameters
+						- script chekout code/build/config/run		// clone code, start/stop process, commit hash
+							// checkout
+							stage('checkout-clone') { // sha - tag - 
+								if (params.hash == "") error("Require commit hash for upcode")
+								checkout([$class: 'GitSCM', branches: [[ name: params.hash ]], userRemoteConfigs: [[ credentialsId: 'gitlab-user-account-jenkins', url: gitUrl ]]])		// tool checkout = GitSCM; branch=branch of commit; where=credentials + url
+							}
+							// build
+							// config
+							// run
+							
+						- script rollback						// [create backup folder / run folder]		[backup=zip run folder -> copy .zip to backup folder]		[rollback=unzip file to run folder]
+							+ detemine prev version:			// by prev commit hash -> clone src code cu -> search command: git lock
+								- backup = zip					// Active choice reactive parameters, need libs: hudson.FilePath, jenkins.model.*
+							+ jenkins can't auto approval script: using plugin  Permissive Script Security -> still see the numbers and lists in In-process Script Approval, but Jenkins will bypass it
+							
+								import jenkins.model.*
+								import hudson.FilePath
+
+								backupPath = "/datas/shoeshop/backups/"
+								def node = Jenkins.getInstance().getNode(server)
+								def remoteDir = new FilePath(node.getChannel(), "${backupPath}")
+
+								def files = remoteDir.list()
+								def fileNames = files.collect {it.name}
+
+								if (action == "rollback") return fileNames
+								else return ['ver1', 'ver2']
+						
+						- pipeline script:
+								appUser = "shoeshop"
+								appName = "shoe-ShoppingCart"
+								appVersion = "0.0.1-SNAPSHOT"
+								appType = "jar"
+								processName = "${appName}-${appVersion}.${appType}"
+								folderDeploy = "/datas/${appUser}/run"
+								folderBackup = "/datas/${appUser}/backups"
+								folderMain = "/datas/${appUser}"
+								buildScript = "mvn clean install -DskipTests=true"
+								copyScript = "sudo cp target/${processName} ${folderDeploy}"
+								permsScript = "sudo chown -R ${appUser}:${appUser} ${folderDeploy}"
+								killScript = "sudo kill -9 \$(pgrep -f ${processName})"
+								runScript = "sudo su ${appUser} -c 'cd ${folderDeploy}; pwd; ls -l; whoami; java -jar ${processName} > nohup.out 2>&1 &'"
+								gitUrl = "http://gitlab.devops.com/shoeshopgroup/shoeshop.git"
+
+								def getProcessId() {
+									def pId = sh(returnStdout:true, script: """ pgrep -f ${processName} """, label: "get pId")
+									// def pId = sh(returnStdout:true, script: """ ps -ef| grep ${processName}| grep -v grep| awk \'{print \$2}\' """, label: "get pId")
+								}
+
+								def startProcess() {
+									stage('start-run-process') {
+										sh(script: """ ${runScript} """, label: "run the project")
+										echo "get PID start"
+										sleep 10
+										def pId = getProcessId()
+										if ("${pId}" == "") {
+											error("Can not start process without pId")
+										}
+										echo("${appName} with server " + params.server + " started")
+									}
+								}
+
+								def stopProcess() {
+									stage('stop-process') {
+										def pId = getProcessId()
+										if (pId != "") sh(script: """ sudo kill -9 ${pId} """, label: "kill process")
+										echo("${appName} with server " + params.server + " stopped")
+									}
+								}
+
+								def upcodeProcess() {   // clone src code - build - config - run
+									stage('checkout-clone') { // sha - tag - 
+										if (params.hash == "") error("Require commit hash for upcode")
+										checkout([$class: 'GitSCM', branches: [[ name: params.hash ]], userRemoteConfigs: [[ credentialsId: 'gitlab-user-account-jenkins', url: gitUrl ]]])
+									}
+									stage('build') {
+										sh(script: """ ${buildScript} """, label: "build the project")
+									}
+									
+									stage('config') {
+										sh(script: """ ${copyScript} """, label: "copy .jar file to deploy folfer")
+										sh(script: """ ${permsScript} """, label: "assign project permission for user shoeshop")
+									}
+								}
+
+								def backupProcess() {
+									stage('backup') { // appName_yyyyddmm_hhmm_hashCommit.zip
+										def timeStamp = new Date().format("yyy-dd-mm_HH-mm")
+										def zipFileName = "${appName}_${timeStamp}.zip"
+										sh(script: """ sudo su ${appUser} -c "cd ${folderMain}; zip -jr ${folderBackup}/${zipFileName} ${folderDeploy}" """, label: "zip run folder for backup old version") // -r=folder; -j=latest subFolder in folderBackup=backups
+									}
+								}
+
+								def rollbackProcess() {
+									stage('rollback') {
+										sh(script: """ sudo su ${appUser} -c "cd ${folderDeploy}; rm -rf *" """, label: "delete current version")
+										sh(script: """ sudo su ${appUser} -c "cd ${folderBackup}; unzip ${params.rollback_version} -d ${folderDeploy}" """, label: "rollback verion - ${params.rollback_version}")
+									}
+								}
+
+								node(params.server) {
+									currentAction = params.action
+									echo "action ${currentAction}"
+									if (currentAction == "start") startProcess()
+									if (currentAction == "stop") stopProcess()
+									if (currentAction == "upcode") {
+										backupProcess()
+										stopProcess()
+										currentBuild.description = "server " + params.server + " upcode with hash " + params.hash
+										upcodeProcess()
+										echo "${currentBuild.description}"
+										startProcess()
+									}
+									if (currentAction == "rollback") {
+										backupProcess()
+										stopProcess()
+										rollbackProcess()
+										startProcess()
+									}
+								}
+					
 		// 1. kết nối jenkins-server đến lab-server: 		jenkins Agent
 		// 2. kết nối jenkins-server đến gitlab-server: 	plugin-gitlab & BlueOcen
 	
 	1.6. Monitoring
-	
+
+2. Jenkins:
+	2.1.
+	2.2.
+	2.3.
+	2.4.
+	2.5.
+	2.6. Managing Jenkins
+		2.6.1.
+		.....
+		2.6.8. In-process Script Approval:
+			+ allow users to execute Groovy scripts in Jenkins, which are provided by: Script Console / Jenkins Pipeline / Extended Email plugin / Groovy plugin ["Execute system Groovy script" step] / JobDSL plugin [v1.60+]
+			+ This protection is provided by the Script Security plugin: 2 way
+				 - Groovy Sandbox: 	defalut
+				 - Script Approval: unsandboxed scripts or allow sandboxed scripts to execute additional methods
+			
+			+ Groovy sandbox:
+				- 
 
+
+
+
+
 https://www.baeldung.com/linux/virtualbox-ping-guest-machines
 
 Windows 11 is not listing a bridged adapter for VirtualBox
Index: app/src/main/assets/DevopsDoc/IpPortServer.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/assets/DevopsDoc/IpPortServer.txt b/app/src/main/assets/DevopsDoc/IpPortServer.txt
--- a/app/src/main/assets/DevopsDoc/IpPortServer.txt	(revision 45e111c103a0fb3bd2123b5b8b022355c059df0a)
+++ b/app/src/main/assets/DevopsDoc/IpPortServer.txt	(date 1738860609206)
@@ -6,7 +6,7 @@
 ///////////////////	Company	//////////////////////////////////////////////////////////////////
 Name						IP						Domain					Web/Port/Type
 lab-server					192.168.56.10			server.devops.com		todolist:2001/Vuejs:nginx			vision:3000/React:service			shoeshop:8090/Spring:
-																		todolist:5555/Vuejs:docker			vision:4444/React:docker			shoeshop:7777-6666/Spring:docker
+																			todolist:5555/Vuejs:docker			vision:4444/React:docker			shoeshop:7777-6666/Spring:docker
 database-server				192.168.56.20:3306		database.devops.com
 gitlab-server				192.168.56.30			gitlab.devops.com
 registry-server				192.168.56.40:5000		registry.devops.com
@@ -125,7 +125,7 @@
 		- check:
 			+ docker-compose ps							// list docker-compose running
 			+ 192.168.56.10:5000/v2/_catalog:			// list images on registry									// registry-domain/v2/_catalog ~ registry.devops.com/v2/_catalog
-			+ 192.168.56.10:5000/v2/image/tag/list:		// list tags of image on registry
+			+ 192.168.56.10:5000/v2/image/tags/list:	// list tags of image on registry
 		- *** copy cert to any client using registry:	mkdir -p /etc/docker/certs.d/192.168.56.10:5000		----	cp 	/tools/docker/registry/certs/domain.crt /etc/docker/certs.d/192.168.56.10:5000/ca.crt
 //////////////////////////////////////////////////////////////////////////////////////
 5. Jenkins server:
@@ -133,79 +133,192 @@
 		- add hosts & reverse proxy:	nginx 	& 	nano /etc/nginx/conf.d/jenkins.devops.com.conf	 ---	
 				server { listen 80; server_name jenkins.devops.com; location / { proxy_pass http://jenkins.devops.com:8000; } }
 	+ connect jenkins-server vs lab-server: 	by Jenkins Agent
-		- lab-server:		install java version same jenkins: apt install openjdk-17-jdk / adduser jenkins	/ add jenkins-folder: /var/lib/jenkins 
+		- lab-server:		install java version same jenkins: apt install openjdk-17-jdk / adduser jenkins	/ add jenkinsFolder: /var/lib/jenkins [clone code from gitlab / build / run]
 							-> chown -R jenkins:jenkins /var/lib/jenkins	/ NOPASSWD: visudo for user jenkins
-		- jenkins-server:	add Node [Number of executors 3/4 -- Remote root directory: jenkins-folder from lab-server] [Add fixed port]	 -> save ->	show command to connect lab-server
-		- lab-server:		su jenkins	-	cd /var/lib/jenkins		-> run commands with secret-file + nohup
+		- jenkins-server:	add Node [Number of executors 3/4 -- Remote root directory: jenkinsFolder from lab-server] [Add fixed port]	 -> save ->	show command to connect lab-server	-> node not run
+		- lab-server:		su jenkins	-	cd /var/lib/jenkins		-> run commands with secret-file + nohup -> jenkinsFolder: save agent.jar / secret-file
+							java -jar agent.jar -url http://jenkins.devops.com:8080/ -secret @secret-file -name "lab-server-node" -webSocket -workDir "/var/lib/jenkins/" > nohup.out 2>&1 &	-> node start running
 	+ connect jenkins-server vs gitlab-server:	by plugin Gitlab, BlueOcen
 		- gitlab-server:	create user jenkins - admin role		-> 	login by user jenkins		->		Profile: Access Token scope API
 		- jenkins-server:	install plugin: 	Gitlab, BlueOcen	-> 	System -> Gitlab: set name - domain - add API token [Domain: Global  -  Kind: API token  -  Scope: Global/System  -  ID: jenkins-gitlab-user] -> Add -> Test
+		
+	+ check log:	By default logs should be made available in /var/log/jenkins/jenkins.log, unless customized in /etc/default/jenkins (for *.deb) or via /etc/sysconfig/jenkins (for */rpm)
+		- java -jar /usr/share/java/jenkins.war			// fail
+		- journalctl -u jenkins.service					// search key
+		- config:	systemctl edit jenkins				// failed: file is not edited			//	[Service]	Environment="JENKINS_LOG=%L/jenkins/jenkins.log"
+	
+	+ config:		/etc/default/jenkins	-> PORT, LOGS
 //////////////////////////////////////////////////////////////////////////////////////
-6. Deploy servers: lab-server, sub-server, ...
+6. Deploy servers: lab-server, sub-server, ...												nohub java -jar /run/shoeshop/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar > nohub.out 2>&1 &
 	+ add hosts for gitlab-server, jenkins-server, lab-server, registry-server
 	
 	+ Gitlab CI/CD: 		using gitlab-runner
 		- lab-server: install gitlab-runner
-			- online:	curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash	/	apt install gitlab-runner
-			- offline:	curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb"		/	 curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner-helper-images.deb"
+			+ online:	curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash	/	apt install gitlab-runner
+			+ offline:	curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb"		/	 curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner-helper-images.deb"
 						dpkg -i gitlab-runner-helper-images.deb gitlab-runner_amd64.deb
-			- config:	/etc/gitlab-runner/config.toml		-> 		edit concurrent = 4
+			+ config:	/etc/gitlab-runner/config.toml		-> 		edit concurrent = 4
 						visudo								->		gitlab-runner ALL=(ALL:ALL) NOPASSWD: /bin/cp*-chmod*-su shoeshop*			// for using other user to run CI/CD
 			+ gitlab-runner register -> gitlab domain, token (on gitlab-server/project setting), runner name, executor=shell/docker/...
-			+ gitlab-runner run --working-directory /home/gitlab-runner --config ../config.toml --service gitlab-runner --user gitlab-runner > nohup.out 2>&1 &	-> gitlab-runner list		// run = multiple >< run-single
-			- gitlab-runner-shell/docker
-		- gitlab-server:
+			+ gitlab-runner run --working-directory /home/gitlab-runner --config ../config.toml --service gitlab-runner --user gitlab-runner > nohup.out 2>&1 &	-> gitlab-runner list	// run = multiple >< run-single
+			+ type: gitlab-runner-shell/docker		/		/home/gitlab-runner/xxx/project: [clone project from gitlab -> build -> run: copy *jar file to other folder "/datas/shoeshop/" & run]
+		- gitlab-server:	develop for gitlab-runner-shell		/		staging for gitlab-runner-docker
 			+ .gitlab-ci.yml: 	creater project/.gitlab-ci.yml	-> stages: [jobs] / variables: [vars] / stage: job / when: manual / script: [commands] / tag: runner-name / only: tags/branch
 				- build stage: 	clone project from gitlab-server to lab-server with path: /home/gitlab-runner/builds/AZxtpzuE/0/shoeshopgroup/shoeshop 
-								-> build folder: /target/ wwith user [gitlab-runner] on lab-server
+								-> build folder: /target/ with user [gitlab-runner] on lab-server
 				- deploy stage:	should use other user and folder for run/deploy project [user: shoeshop, folder: /datas/shoeshop/] -> cần copy file, cấp quyền rwx folder cho user
-			+ CI with docker:	add variables: REGISTRY_URL / PROJECT / VERSION / USER / PASSWORD
+			+ CI with docker:	
 				- usermod -aG docker gitlab-runner					// add group docker for user gitlab-runner, để gitlab có thể run docker
+				- add variables: REGISTRY_URL / PROJECT / USER / PASSWORD								REGISTRY_URL = 192.168.56.40:5000		// protected variables only for protected branches
 				- create project/Dockerfile:		-> 
 					+ build:	[FROM build-alpine:ver as build]										[WORKDIR /app	COPY . .] 	[RUN build-command]	
-					+ run:		[FROM alpine:ver	RUN adduser -D uName	RUN run-envr-command]		[WORKDIR /run	COPY --from=build /target/image  /run/image]		[RUN chmod -R uName	 	User uName]		EXPOSE containerPort
+					+ run:		[FROM alpine:ver	RUN run-envr-command]								[WORKDIR /run	COPY --from=build /target/image  /run/image]		
+								[RUN adduser -D uName 		RUN chmod -R uName	 	User uName]			[EXPOSE containerPort]				[ENV xxx]
 								[ENTRYPOINT run-command]												CMD ["command", "params", ""]		// run-command = java -jar /run/shoeshop/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar
 				- .gitlab-ci.yml:
 					+ build:
 						- before_script:	docker login registry-server -u user -p password
-						- script:		 	docker build -t image . 	/		docker push image registry-server			// image format: domain/project/image:tag_commit
+						- script:		 	docker build -t image . 	/		docker push image			// image format: domain/project/image:tag_commit
 					+ run:
 						- before_script:	docker login registry-server -u user -p password
-						- script:		 	docker pull image	 		/		docker run --name containerName -dp serverPort:containerPort image		/		add user & roles
-	
-	+ Jenkins CI/CD:
+						- script:		 	docker pull image	 		/		docker run --name containerName -dp serverPort:containerPort image		/ adduser & roles
+											// docker run container: success = logs: Tomcat started on port(s): 8080 (http)		 						8080 = container port, neu da set port server truoc, Tomcat se start tren port do
+					+ showlog:
+						- script:			docker logs $DOCKER_CONTAINER
+				- Notes:
+					+ voi docker: 	connect toi database nen dung IP, dung domain co the bi loi "java.net.UnknownHostException: database.devops.com: Name does not resolve"
+									docker run da co config -dp (run in background) roi nen trong Dockerfile ko can run backgroud nua (nohup)
+	+ Jenkins CI/CDeployment:
+		- lab-server: 		if node is not running: cd /var/lib/jenkins		-> 		su jenkins		->
+							-> java -jar agent.jar -url http://jenkins.devops.com:8080/ -secret @secret-file -name "lab-server-node" -webSocket -workDir "/var/lib/jenkins/" > nohup.out 2>&1 &	-> node start running
+							-> make service: nano /lib/systemd/system/jenkins-agent.service		-> 		systemctl daemon-reload		->		systemctl start jenkins-agent+
+								[Unit]
+								Description=Jenkins Agent Service
+								After=network.target								# run service sau khi network dc thiet lap xong
+								[Service]
+								Type=simple
+								WorkingDirectory=/var/lib/jenkins
+								ExecStart=/bin/bash -c 'java -jar agent.jar -url http://jenkins.devops.com:8080/ -secret @secret-file -name "lab-server-node" -webSocket -workDir "/var/lib/jenkins/"'		# command to run jenkins-agent
+								User=jenkins
+								Restart=always										# auto restart if it is stopped								
+								[Install]
+								WantedBy=multi-user.target							# can run by multi-user
+								
 		- jenkins-server:	create Folder & Pipeline of Folder & create token for user jenkins (nên tạo user riêng cho project - ngocnm, token dung tren gitlab)
-			+ Folder:		Dashboard -> New Item -> Folder ->	Action-in-lab (lab-server)
-			+ Pipeline:		Dashboard -> Action-in-lab folder -> New Item -> Pipeline: name shoeshop	-> config:	[Discard old builds: Max build to keep / Gitlab connection / Build trigger / Branches to build]
+			+ Folder:		Dashboard -> New Item -> Folder ->	Action-in-lab-server
+			+ Pipeline:		Dashboard -> Action-in-lab-server folder -> New Item -> Pipeline: name shoeshop	-> config:	[Discard old builds: Max build to keep / Gitlab connection / Build trigger / Branches to build]
 							-> config: [Pipeline:	Pipeline script from SCM -> SCM: Git / Repo Url: http://gitlab.devops.tech/group/shoeshop.git / Credentials: new Jenkins [user-gitlab: jenkins, pass: password]]
-			+ Token:		Account -> Security -> API token: add new token
+			+ Token:		Account -> Security -> API token: add new token							// 1175600b85cccd7a9dbdf938e4587282a9
+		
 		- gitlab-server:	
 			+ Allow Webhooks:	Admin Setting -> Network -> Outbound request:  Allow requests to the local network from webhooks and integrations -> Save
 			+ Add Webhooks:	Project Setting -> Webhooks: [URL:  http://<user jenkins>:<token user jenkins>@<domain jenkins>/project/<path of project on jenkins>]	// http://user:token@jenkins.devops.com/project/Action-in-lab/shoeshop
 			+ Add Jenkinsfile for project: groovy syntax
 					pipeline {
 						agent {
-							label 'lab-server-label'
+							label 'lab-server-node-label'
 						}
 						environment {
 							appUser = "shoeshop"
-							appName =  "shoe-ShoppingCart"
+							appName = "shoe-ShoppingCart"
 							appVersion = "0.0.1-SNAPSHOT"
-							processName = "${appName}-${appVersion}.jar"
+							appType = "jar"
+							processName = "${appName}-${appVersion}.${appType}"
 							folderDeploy = "/datas/${appUser}"
 							buildScript = "mvn clean install -DskipTests=true"
+							copyScript = "cp target/${processName} ${folderDeploy}"
+							permsScript = "chown -R ${appUser}. ${folderDeploy}"
+							killScript = "sudo kill -9 \$(pgrep -f ${processName})"
+							deployScript = "sudo su ${appUser}; cd ${folderDeploy}; pwd; ls -l; whoami; java -jar ${processName} > nohup.out 2>&1 &"
 						}
 						stages {
 							stage('build') {
 								steps {
-									sh(script: """ whoami;pwd;ls -la;${buildScript} """, label: "build-job with maven")
+									sh(script: """ whoami; pwd; ls -la; ${buildScript} """, label: "show info")
 								}
 							}
-						}
-					}
+							stage('deploy') {
+								steps {
+									sh(script: """ ${copyScript} """, label: "copy jar file")
+									sh(script: """ ${permsScript} """, label: "set permission")
+									sh(script: """ ${killScript} """, label: "kill old processName")
+									sh(script: """ ${deployScript} """, label: "deploy app")
+									///////////////////// Ask before deploy ////////////////////////////////////
+									script {
+										try {
+											timeout(time: 5, unit: 'MINUTES') {
+												evn.userChoice = input message: "Do you want to deploy this?", parameters: [choice(name: 'deploy', choices: 'no\nyes', description: 'Choose "yes" to deploy')]
+											}
+											echo "Check choice: $env.userChoice"
+											if (evn.userChoice == 'yes') {
+												sh(script: """ ${copyScript} """, label: "copy jar file")
+												sh(script: """ ${permsScript} """, label: "set permission")
+												sh(script: """ ${killScript} """, label: "kill old processName")
+												sh(script: """ ${deployScript} """, label: "deploy app")
+											} else {
+												echo "User do not confirm the deployment!"
+											}
+										} catch(Exception ex) {
+											echo "Deploy Exception: $ex"
+										}
+									}
+								}
+							}
+						}
+					}
+			+ CI with Docker:
+				- lab-server: 		usermod -aG docker jenkins
+				- jenkins-server:	add variables [REGISTRY_URL, REGISTRY_PROJECT, REGISTRY_USER, REGISTRY_PASS]
+				- gitlab-server:	
+					+ Dockerfile:	same above
+					+ Jenkinsfile:
+							pipeline {
+								agent {
+									label 'lab-server-node-label'
+								}
+								environment {
+									..............
+								}
+								stages {
+									stage('build') {
+										steps {
+											sh(script: """ whoami; pwd; ls -la; ${buildScript} """, label: "show info")
+										}
+									}
+									stage('deploy') {
+										steps {
+											sh(script: """ ${copyScript} """, label: "copy jar file")
+											sh(script: """ ${permsScript} """, label: "set permission")
+											sh(script: """ ${killScript} """, label: "kill old processName")
+											sh(script: """ ${deployScript} """, label: "deploy app")
+										}
+									}
+								}
+							}
+		- lab-server: Running on lab-server-node in /var/lib/jenkins/workspace/Action-in-lab-server/shoeshop
+	
+	+ Jenkins CI/CDelivery:
+		
+		
+		def remoteDir = new FilePath(node.getChannel(), backupPath)
+
+def files = remoteDir.list()
+def fileNames = files.collect {it.name}
+if (action == "rollback") return fileNames
+else return ['ver11', 'ver22']
+	
+	** Deploy result:
+		+ Gitlab CI/CD:
+			- normal:	server.port=8888													http://192.168.56.10:8888					develop
+			- docker:	server.port=9999				container.port=8080					http://192.168.56.10:9999					staging
+		+ Jenkins CI/CD:
+			- normal:	server.port=8000													http://192.168.56.10:8000					main
+			- docker: 	server.port=9000				container.port=8081					http://192.168.56.10:8000					jenkins
+/////////////////////////////////////////////////////////////////////////////////////
+
 /////////////////////////////////////////////////////////////////////////////////////
 7. Docker: on lab-server
-	- install: apt install docker.io									sh install-docker.sh
+	- install: apt install docker-ce									sh install-docker.sh
 	- docker  login url / pull domain/project/image:tag / 				start containerName / stop / rm / rmi / logs / ps / push domani/project/image:tag
 	- docker build -t domani/project/image:tag -f Dockerfile			-> build image
 	- docker run --name name -dp 8080:80 -it image:tag					// 8080:80 = server-port:container-port
@@ -262,4 +375,149 @@
 - Migrate DB:
 	+ 
 	+ 
-/////////////////////////////////////////////////////////////////////////////////////
\ No newline at end of file
+/////////////////////////////////////////////////////////////////////////////////////
+
+CẤU TRÚC POD.YAML TRONG KUBERNETES
+
+appversion: v1 					→ LOẠI API CỦA TÀI NGUYÊN (
+
+kind: pod 						→ LOẠI TÀI NGUYÊN (POD)
+
+metadata:
+	name: techops-pod 			→ Tên duy nhất của Pod
+	abels: 						→ Nhãn để tổ chức và chọn Podapp: techops → Nhãn ứng dụng, hữu ích cho bộ chọn (selectors)
+		tier: backend 			→ Xác định lớp ứng dụng
+
+spec:
+	containers: 				→ CONTAINER(S) CHẠY TRONG POD NÀY
+	- name: techops-container 	→ Tên của container
+	  image: nginx:1.23 		→ Docker image cho container
+	  ports:
+	  - containerPort: 80 		→ Cổng mà container mở nội bộ
+	  env:
+	  - name: ENV
+	    value: production 		→ Biến môi trường để cấu hình
+	  volumeMounts: 			→ CÁC VOLUMES ĐƯỢC GẮN VÀO TRONG CONTAINER
+	  - name: config-volume 	→ Volume được định nghĩa trong phần “volumes”
+		mountPath: /usr/share/nginx/html 	→ Điểm gắn kết (mount point) bên trong container
+
+	volumes:
+	- name: config-volume 		→ Tên của volume
+	  configMap:
+	    name: techops-config	→ Sử dụng ConfigMap làm nguồn và tham chiếu đến ConfigMap có tên “techops-config”
+	  
+	RESTARTPOLICY: ALWAYS 		→ CHÍNH SÁCH KHỞI ĐỘNG LẠI POD (ALWAYS, ONFAILURE HOẶC NEVER)
+
+	NODESELECTOR: 				→ LỊCH TRÌNH (SCHEDULE) POD TRÊN CÁC NODE CỤ THỂ
+	  disktype: ssd 			→ Chỉ chạy trên các node có nhãn “disktype=ssd”
+
+	TOLERATIONS: 				→ CHO PHÉP LÊN LỊCH TRÊN CÁC NODE BỊ "TAINT"
+	- key: "special-taint" 		→ Khóa taint cần chấp nhận
+	  operator: "Equal" 		→ Điều kiện khớp chính xác
+	  value: "true" 			→ Giá trị cần khớp
+	  effect: "NoExecute" 		→ Tác động: Không lên lịch (NoSchedule) hoặc đuổi khỏi node (NoExecute)
+
+	SECURITYCONTEXT: 			→ THIẾT LẬP BẢO MẬT Ở CẤP ĐỘ POD	
+	  runAsUser: 1000 			→ Chạy container dưới user ID này
+	  runAsGroup: 3000 			→ Chạy container dưới group ID này
+	  fsGroup: 2000 			→ Nhóm sở hữu volumes đã gắn kết
+
+	INITCONTAINERS: 			→ CHẠY TRƯỚC KHI CONTAINER CHÍNH CHẠY
+	- name: init-techops 		→ Tên container khởi tạo
+	  image: busybox 			→ Image của container khởi tạo
+	  command: ["sh", "-c", "echo Init; sleep 5"] 	→ Câu lệnh khởi tạo
+
+/////////////////////////////////////////////////////////////////////////////////////
+appUser = "shoeshop"
+appName = "shoe-ShoppingCart"
+appVersion = "0.0.1-SNAPSHOT"
+appType = "jar"
+processName = "${appName}-${appVersion}.${appType}"
+folderDeploy = "/datas/${appUser}/run"
+folderBackup = "/datas/${appUser}/backups"
+folderMain = "/datas/${appUser}"
+buildScript = "mvn clean install -DskipTests=true"
+copyScript = "sudo cp target/${processName} ${folderDeploy}"
+permsScript = "sudo chown -R ${appUser}:${appUser} ${folderDeploy}"
+killScript = "sudo kill -9 \$(pgrep -f ${processName})"
+runScript = "sudo su ${appUser} -c 'cd ${folderDeploy}; pwd; ls -l; whoami; java -jar ${processName} > nohup.out 2>&1 &'"
+gitUrl = "http://gitlab.devops.com/shoeshopgroup/shoeshop.git"
+
+def getProcessId() {
+    def pId = sh(returnStdout:true, script: """ pgrep -f ${processName} """, label: "get pId")
+    // def pId = sh(returnStdout:true, script: """ ps -ef| grep ${processName}| grep -v grep| awk \'{print \$2}\' """, label: "get pId")
+}
+
+def startProcess() {
+    stage('start-run-process') {
+        sh(script: """ ${runScript} """, label: "run the project")
+        echo "get PID start"
+        sleep 10
+        def pId = getProcessId()
+        if ("${pId}" == "") {
+            error("Can not start process without pId")
+        }
+        echo("${appName} with server " + params.server + " started")
+    }
+}
+
+def stopProcess() {
+    stage('stop-process') {
+        def pId = getProcessId()
+        if (pId != "") sh(script: """ sudo kill -9 ${pId} """, label: "kill process")
+        echo("${appName} with server " + params.server + " stopped")
+    }
+}
+
+def upcodeProcess() {   // clone src code - build - config - run
+    stage('checkout-clone') { // sha - tag - 
+        if (params.hash == "") error("Require commit hash for upcode")
+        checkout([$class: 'GitSCM', branches: [[ name: params.hash ]], userRemoteConfigs: [[ credentialsId: 'gitlab-user-account-jenkins', url: gitUrl ]]])
+    }
+    stage('build') {
+        sh(script: """ ${buildScript} """, label: "build the project")
+    }
+    
+    stage('config') {
+        sh(script: """ ${copyScript} """, label: "copy .jar file to deploy folfer")
+        sh(script: """ ${permsScript} """, label: "assign project permission for user shoeshop")
+    }
+}
+
+def backupProcess() {
+    stage('backup') { // appName_yyyyddmm_hhmm_hashCommit.zip
+        def timeStamp = new Date().format("yyy-dd-mm_HH-mm")
+        def zipFileName = "${appName}_${timeStamp}.zip"
+        sh(script: """ sudo su ${appUser} -c "cd ${folderMain}; zip -jr ${folderBackup}/${zipFileName} ${folderDeploy}" """, label: "zip run folder for backup old version") // -r=folder; -j=latest subFolder in folderBackup=backups
+    }
+}
+
+def rollbackProcess() {
+    stage('rollback') {
+        sh(script: """ sudo su ${appUser} -c "cd ${folderDeploy}; rm -rf * """, label: "delete current version")
+        sh(script: """ sudo su ${appUser} -c "cd ${folderBackup}; unzip ${params.rollback_version} -d ${folderDeploy} """, label: "rollback verion - ${params.rollback_version}")
+    }
+}
+
+node(params.server) {
+    currentAction = params.action
+    echo "action ${currentAction}"
+    if (currentAction == "start") startProcess()
+    if (currentAction == "stop") stopProcess()
+    if (currentAction == "upcode") {
+        backupProcess()
+        stopProcess()
+        currentBuild.description = "server " + params.server + " upcode with hash " + params.hash
+        upcodeProcess()
+        echo "${currentBuild.description}"
+        startProcess()
+    }
+    if (currentAction == "rollback") {
+        backupProcess()
+        stopProcess()
+        rollbackProcess()
+        startProcess()
+    }
+}
+/////////////////////////////////////////////////////////////////////////////////////
+
